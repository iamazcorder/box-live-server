user root;
worker_processes 1;

events {
  worker_connections 1024;
}


http {
  # 允许最大上传的大小
  client_max_body_size 50m;
  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  keepalive_timeout 65;

  # 第一个参数：$binary_remote_addr 表示通过remote_addr这个标识来做限制，“binary_”的目的是缩写内存占用量，是限制同一客户端ip地址。
  # 第二个参数：zone=limit_nuxt:10m表示生成一个大小为10M，名字为limit_nuxt的内存区域，用来存储访问的频次信息。
  # 第三个参数：rate=10r/s表示允许相同标识的客户端的访问频次，限制为每秒（m）最多10个请求（10r）；还可以有比如30r/m的。即每分钟（m）最多30个请求（30r）
  limit_req_zone $binary_remote_addr zone=limit_nuxt:20m rate=100r/s;


  upstream testServer {
    server localhost:3100 weight=3;
    server localhost:3200 weight=10;
    server localhost:3300 weight=5;
  }

  # 多个server需要每个listen都写端口号，不写listen的话貌似也没问题？实际测试不写80端口的会找对应的server_name
  # hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 3500;

    location /prodapi/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3200/;
    }

    location /betaapi/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3300/;
    }
  }

  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://www.hsslive.cn/$1 permanent;
    }
  }

  # www.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name www.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://www.hsslive.cn/$1 permanent;
    }
  }

  # lyh.aishangjf.com 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    # include extra/valid_referers.conf;

    listen 80;
    server_name lyh.aishangjf.com;

    location / {
      root /node/;
      index index.html index.htm;
    }
  }

  # admin.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name admin.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://admin.hsslive.cn/$1 permanent;
    }
  }

  # nuxt2.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name nuxt2.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://nuxt2.hsslive.cn/$1 permanent;
    }
  }

  # live-admin.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name live-admin.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://live-admin.hsslive.cn/$1 permanent;
    }
  }

  # api.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name api.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://api.hsslive.cn/$1 permanent;
    }
  }

  # live.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name live.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://live.hsslive.cn/$1 permanent;
    }
  }

  # jenkins.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name jenkins.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://jenkins.hsslive.cn/$1 permanent;
    }
  }

  # registry.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name registry.hsslive.cn;

    # location / {
    #     # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
    #     rewrite ^/(.*) https://registry.hsslive.cn/$1 permanent;
    # }
    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $host;
      proxy_set_header X-NginX-Proxy true;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_redirect off;
      proxy_pass http://localhost:4873/;
    }
  }

  # project.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name project.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://project.hsslive.cn/$1 permanent;
    }
  }

  # lang.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name lang.hsslive.cn;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://lang.hsslive.cn/$1 permanent;
    }
  }

  # next.hsslive.cn 80端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 80;
    server_name next.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://next.hsslive.cn/$1 permanent;
    }
  }

  # srs-pull.hsslive.cn 80端口
  # server {
  #     # 图片防盗链
  #     include extra/valid_referers.conf;

  #     listen 80;
  #     server_name srs-pull.hsslive.cn;
  #     # 开启gzip，关闭用off
  #     gzip on;
  #     # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
  #     gzip_types text/plain text/css application/json application/javascript
  #     # 是否在http header中添加Vary: Accept-Encoding，建议开启
  #     gzip_vary on;
  #     # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
  #     gzip_comp_level 6;
  #     location / {
  #         # default_type application/json ;
  #         # return 200 '111';
  #         # X-Real-IP是自定义的，给koa里记录日志
  #         proxy_set_header X-Real-IP $remote_addr;
  #         # X-Forwarded-For,是事实上的标准，暂时没地方用到
  #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #         # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
  #         proxy_set_header X-Forwarded-Proto $scheme;
  #         # proxy_set_header X-NginX-Proxy true;
  #         # proxy_pass http://42.193.157.44:5001/;
  #         proxy_pass http://8.218.5.78/;
  #         # proxy_pass http://8.218.5.78:5001/;
  #         # proxy_pass http://localhost:5001/;
  #     }
  # }
  # srs-push.hsslive.cn 80端口
  # server {
  #     # 图片防盗链
  #     include extra/valid_referers.conf;
  #     listen 80;
  #     server_name srs-push.hsslive.cn;
  #     # 开启gzip，关闭用off
  #     gzip on;
  #     # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
  #     gzip_types text/plain text/css application/json application/javascript
  #     # 是否在http header中添加Vary: Accept-Encoding，建议开启
  #     gzip_vary on;
  #     # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
  #     gzip_comp_level 6;
  #     location / {
  #         default_type application/json ;
  #         return 200 '111';
  #         # # X-Real-IP是自定义的，给koa里记录日志
  #         # proxy_set_header X-Real-IP $remote_addr;
  #         # # X-Forwarded-For,是事实上的标准，暂时没地方用到
  #         # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #         # # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
  #         # proxy_set_header X-Forwarded-Proto $scheme;
  #         # # proxy_set_header X-NginX-Proxy true;
  #         # # proxy_pass http://42.193.157.44:5001/;
  #         # proxy_pass http://8.218.5.78:19352/;
  #         # # proxy_pass http://localhost:5001/;
  #     }
  # }
  # =====================================分界线===================================
  # www.hsslive.cn和admin.hsslive.cn都是443端口，为啥代码到https://hsslive.cn，就会代理到https://www.hsslive.cn？
  # 实测证明，如果注释掉https的www.hsslive.cn，只留一个https的admin.hsslive.cn，https://hsslive.cn还是会代理到https://www.hsslive.cn，但是显示的内容却是admin.hsslive.cn的
  # 可以用postman测试。不要用浏览器测试，因为浏览器可能存在dns缓存等问题。
  # www.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name www.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;
    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/www.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/www.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    # location /bilibilistream/ {
    #     # X-Real-IP是自定义的，给koa里记录日志
    #     proxy_set_header X-Real-IP $remote_addr;
    #     # X-Forwarded-For,是事实上的标准，暂时没地方用到
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     # proxy_set_header X-NginX-Proxy true;
    #     proxy_pass https://xy117x149x235x203xy.mcdn.bilivideo.cn/;
    # }
    location / {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3000/;
      # 第一个参数：zone=limit_nuxt 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应。
      # 第二个参数：burst=5，重点说明一下这个配置，burst爆发的意思，这个配置的意思是设置一个大小为5的缓冲区当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。
      # 第三个参数：nodelay，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队。
      # limit_req zone=limit_nuxt burst=100;

    }

    location /socket.io/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;

      # websocket用的，不能省
      proxy_set_header Upgrade $http_upgrade;
      # websocket用的，不能省
      proxy_set_header Connection Upgrade;

      proxy_pass http://localhost:3200/socket.io/;
    }

  }

  # hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name hsslive.cn;

    # WARN 这里虽然仅仅作为重定向使用，但是仍然需要配置ssl证书，
    # 否则nuxt或者next在请求https://hsslive.cn/prodapi/tag/list/会报错误:Hostname/IP does not match certificate's altnames
    # 而且没配置ssl证书的话，在浏览器首次请求https://hsslive.cn/prodapi/tag/list/时，也会提示不安全（但是仍然可以点确定然后拿到数据，
    # nuxt或者next应该也是因为这个导致报错的）

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/www.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/www.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      # 把当前域名的请求，跳转到新域名上，域名变化但路径不变，permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址
      rewrite ^/(.*) https://www.hsslive.cn/$1 permanent;
    }


    # WARN ===这里不匹配/prodapi/和/betaapi/，仅仅将https://hsslive.cn重定向到https://www.hsslive.cn===
    # 即请求https://hsslive.cn/prodapi/tag/list/就会重定向到https://www.hsslive.cn/prodapi/tag/list/
    # 但是注意：如果在浏览器发起xhr请求https://hsslive.cn/prodapi/tag/list/，会得到一个301重定向结果，拿不到数据！
    # 这是直接在浏览器地址栏访问https://hsslive.cn/prodapi/tag/list/，就会重定向到https://www.hsslive.cn/prodapi/tag/list/，可以拿到数据
    # !!!!!!!!!!!!!!接口服务请调用api.hsslive.cn!!!!!!!!!
  }

  # live-admin.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链（这里不能直接include valid_referers.conf，因为它里面的root是/node/，和live.hsslive.cn的root不一致）
    # include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name live-admin.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/live-admin.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/live-admin.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;

      # proxy_set_header X-NginX-Proxy true;

      root /node/billd-live-admin;
      index index.html index.htm;
      try_files $uri $uri/ /index.html;
    }
  }

  # admin.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name admin.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/admin.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/admin.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    # 设置类似/xxx/xxxx.html的缓存
    location ~* ^\/.+\.html {
      root /node/vue3-blog-admin;
      try_files $uri /$1/index.html;
      add_header Cache-Control "max-age=0";
    }

    location / {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;

      # proxy_set_header X-NginX-Proxy true;

      root /node/vue3-blog-admin;
      index index.html index.htm;
      try_files $uri $uri/ /index.html;
      # 第一个参数：zone=limit_nuxt 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应。
      # 第二个参数：burst=5，重点说明一下这个配置，burst爆发的意思，这个配置的意思是设置一个大小为5的缓冲区当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。
      # 第三个参数：nodelay，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队。
      # limit_req zone=limit_nuxt burst=100;
    }
  }

  # desk.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name desk.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/desk.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/desk.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;

      # proxy_set_header X-NginX-Proxy true;

      root /node/billd-desk;
      index index.html index.htm;
      try_files $uri $uri/ /index.html;
      # 第一个参数：zone=limit_nuxt 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应。
      # 第二个参数：burst=5，重点说明一下这个配置，burst爆发的意思，这个配置的意思是设置一个大小为5的缓冲区当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。
      # 第三个参数：nodelay，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队。
      # limit_req zone=limit_nuxt burst=100;
    }
  }

  # lyh.aishangjf.com 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    # include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name lyh.aishangjf.com;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/lyh.aishangjf.com_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/lyh.aishangjf.com.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      root /node/;
      index index.html index.htm;
    }
  }

  # nuxt2.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name nuxt2.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/nuxt2.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/nuxt2.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3400/;
    }

    location /socket.io/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;

      # websocket用的，不能省
      proxy_set_header Upgrade $http_upgrade;
      # websocket用的，不能省
      proxy_set_header Connection Upgrade;

      proxy_pass http://localhost:3200/socket.io/;
    }

  }

  # api.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    listen 443 ssl http2;
    server_name api.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/api.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/api.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location /prodapi/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3200/;
    }

    location /betaapi/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3300/;
    }

    location /netease-cloud-music-api/ {
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3100/;
    }
  }

  # live.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链（这里不能直接include valid_referers.conf，因为它里面的root是/node/，和live.hsslive.cn的root不一致）
    # include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name live.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/live.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/live.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    # 设置类似/xxx/xxxx.html的缓存
    location ~* ^\/.+\.html {
      root /node/billd-live;
      try_files $uri /$1/index.html;
      add_header Cache-Control "max-age=0";
    }

    location / {
      # proxy_read_timeout 300s;
      # proxy_connect_timeout 75s;
      # proxy_redirect off;
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;

      # proxy_set_header X-NginX-Proxy true;

      root /node/billd-live;
      index index.html index.htm;
      try_files $uri $uri/ /index.html;
    }

    # 正式环境接口
    location ^~ /api/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      # proxy_pass http://localhost:4200/;
      proxy_pass http://8.218.5.78:4200/;

    }

    # location ^~ /srsflv/ {
    #     # X-Real-IP是自定义的，给koa里记录日志
    #     proxy_set_header X-Real-IP $remote_addr;
    #     # X-Forwarded-For,是事实上的标准，暂时没地方用到
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     # proxy_set_header X-NginX-Proxy true;
    #     # proxy_pass http://42.193.157.44:5001/;
    #     proxy_pass http://8.218.5.78:5001/;
    # }

    # location ^~ /livestream/ {
    #     # X-Real-IP是自定义的，给koa里记录日志
    #     proxy_set_header X-Real-IP $remote_addr;
    #     # X-Forwarded-For,是事实上的标准，暂时没地方用到
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     # proxy_set_header X-NginX-Proxy true;
    #     # proxy_pass http://42.193.157.44:5001/;
    #     proxy_pass http://8.218.5.78:5001;
    # }
    # location ^~ /tencentcloud/ {
    #     # X-Real-IP是自定义的，给koa里记录日志
    #     proxy_set_header X-Real-IP $remote_addr;
    #     # X-Forwarded-For,是事实上的标准，暂时没地方用到
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     # proxy_set_header X-NginX-Proxy true;
    #     # proxy_pass http://42.193.157.44:5001/;
    #     proxy_pass http://pull.hsslive.cn/;
    # }
    # location ^~ /srs/ {
    #     # X-Real-IP是自定义的，给koa里记录日志
    #     proxy_set_header X-Real-IP $remote_addr;
    #     # X-Forwarded-For,是事实上的标准，暂时没地方用到
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     # proxy_set_header X-NginX-Proxy true;
    #     # proxy_pass http://localhost:1985/;
    #     proxy_pass http://8.218.5.78:1985/;
    # }
    location /socket.io/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;

      # websocket用的，不能省
      proxy_set_header Upgrade $http_upgrade;
      # websocket用的，不能省
      proxy_set_header Connection Upgrade;

      proxy_pass http://8.218.5.78:4200/socket.io/;

    }
  }

  # srs-pull.hsslive.cn 443端口
  # server {
  #     # 禁止访问目录
  #     include extra/disable_dir.conf;
  #     # 图片防盗链
  #     include extra/valid_referers.conf;

  #     # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
  #     listen 443 ssl http2;
  #     server_name srs-pull.hsslive.cn;
  #     # 开启gzip，关闭用off
  #     gzip on;
  #     # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
  #     gzip_types text/plain text/css application/json application/javascript
  #     # 是否在http header中添加Vary: Accept-Encoding，建议开启
  #     gzip_vary on;
  #     # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
  #     gzip_comp_level 6;
  #     # https://cloud.tencent.com/document/product/400/47360
  #     ssl_certificate /usr/local/webserver/nginx/conf/cert/srs-pull.hsslive.cn_bundle.crt;
  #     ssl_certificate_key /usr/local/webserver/nginx/conf/cert/srs-pull.hsslive.cn.key;
  #     ssl_session_timeout 5m;
  #     ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
  #     ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
  #     ssl_prefer_server_ciphers on;
  #     location / {
  #         # default_type application/json ;
  #         # return 200 '111';
  #         # X-Real-IP是自定义的，给koa里记录日志
  #         proxy_set_header X-Real-IP $remote_addr;
  #         # X-Forwarded-For,是事实上的标准，暂时没地方用到
  #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #         # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
  #         proxy_set_header X-Forwarded-Proto $scheme;
  #         # proxy_set_header X-NginX-Proxy true;
  #         proxy_pass http://8.218.5.78:5001/;
  #     }
  # }
  # # pull.hsslive.cn 443端口
  # server {
  #     # 禁止访问目录
  #     include extra/disable_dir.conf;
  #     # 图片防盗链
  #     include extra/valid_referers.conf;
  #     # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
  #     listen 443 ssl http2;
  #     server_name pull.hsslive.cn;
  #     # 开启gzip，关闭用off
  #     gzip on;
  #     # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
  #     gzip_types text/plain text/css application/json application/javascript
  #     # 是否在http header中添加Vary: Accept-Encoding，建议开启
  #     gzip_vary on;
  #     # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
  #     gzip_comp_level 6;
  #     # https://cloud.tencent.com/document/product/400/47360
  #     ssl_certificate /usr/local/webserver/nginx/conf/cert/pull.hsslive.cn_bundle.crt;
  #     ssl_certificate_key /usr/local/webserver/nginx/conf/cert/pull.hsslive.cn.key;
  #     ssl_session_timeout 5m;
  #     ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
  #     ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
  #     ssl_prefer_server_ciphers on;
  # }
  # # push.hsslive.cn 443端口
  # server {
  #     # 禁止访问目录
  #     include extra/disable_dir.conf;
  #     # 图片防盗链
  #     include extra/valid_referers.conf;
  #     # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
  #     listen 443 ssl http2;
  #     server_name push.hsslive.cn;
  #     # 开启gzip，关闭用off
  #     gzip on;
  #     # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
  #     gzip_types text/plain text/css application/json application/javascript
  #     # 是否在http header中添加Vary: Accept-Encoding，建议开启
  #     gzip_vary on;
  #     # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
  #     gzip_comp_level 6;
  #     # https://cloud.tencent.com/document/product/400/47360
  #     ssl_certificate /usr/local/webserver/nginx/conf/cert/push.hsslive.cn_bundle.crt;
  #     ssl_certificate_key /usr/local/webserver/nginx/conf/cert/push.hsslive.cn.key;
  #     ssl_session_timeout 5m;
  #     ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
  #     ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
  #     ssl_prefer_server_ciphers on;
  # }
  # jenkins.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name jenkins.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/jenkins.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/jenkins.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      proxy_set_header X-Forwarded-Host $host:$server_port;
      proxy_set_header X-Forwarded-Server $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;

      proxy_pass http://localhost:8080/;
    }
  }

  # next.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name next.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/next.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/next.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      proxy_pass http://localhost:4000/;
    }
  }

  # registry.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name registry.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/registry.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/registry.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $host;
      proxy_set_header X-NginX-Proxy true;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_redirect off;
      proxy_pass http://localhost:4873/;
    }
  }

  # lang.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name lang.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/lang.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/lang.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;

    location / {
      # 请求localhost/xxx/,会请求到服务器的/node/xxx/index.html
      root /node/lang/;
      index index.html index.htm;
    }
  }

  # project.hsslive.cn 443端口
  server {
    # 禁止访问目录
    include extra/disable_dir.conf;
    # 图片防盗链
    include extra/valid_referers.conf;

    # SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。
    listen 443 ssl http2;
    server_name project.hsslive.cn;

    # 开启gzip，关闭用off
    gzip on;
    # 选择压缩的文件类型，其值可以在 mime.types 文件中找到。
    gzip_types text/plain text/css application/json application/javascript
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，推荐6
    gzip_comp_level 6;

    # https://cloud.tencent.com/document/product/400/47360
    ssl_certificate /usr/local/webserver/nginx/conf/cert/project.hsslive.cn_bundle.crt;
    ssl_certificate_key /usr/local/webserver/nginx/conf/cert/project.hsslive.cn.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TlSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers SM2-WITH-SMS4SM3:ECDH:AESGCM:HIGH:MEDIUM:!RC4:!DH:!MD5:!aNULL:!eNULL;
    ssl_prefer_server_ciphers on;


    location / {
      root /node/;
      index index.html index.htm;
    }

    # location /aaa/ {
    #     # 使用root，匹配到/aaa/时，实际访问的是node目录里面的aaa目录。
    #     #root /node/;
    #     #使用alias，匹配到/aaa/时，实际访问的就是/node/目录
    #     alias /node/;
    #     index index.html index.htm;
    #     try_files $uri $uri/ /index.html;
    # }

    # 根据客户端语言代理到不同地址
    # https://project.hsslive.cn/lang/
    location = /lang/ {
      # default_type application/json ;
      # return 200 '111';

      # 请求localhost/xxx/,会请求到服务器的/node/xxx/index.html
      # zh-tw（台湾）,zh-hk（香港）,zh-mo（澳门）,zh-hant和zh-cht(繁体)
      if ($http_accept_language ~* ^zh-(TW|HK|MO|Hant|CHT)) {
        return 301 https://lang.hsslive.cn/tw/;
      }
      # zh-Hans，简体中文，适用区域范围是全宇宙用中文简体的地方，内容包括各种用简体的方言等。
      # zh-CN，简体中文，中国大陆区域的中文。包括各种大方言、小方言、繁体、简体等等都可以被匹配到。
      if ($http_accept_language ~* ^zh-(CN|Hans)) {
        return 301 https://lang.hsslive.cn/ch/;
      }
      # 英语
      if ($http_accept_language ~* ^en) {
        return 301 https://lang.hsslive.cn/en;
      }
      # 韩文
      if ($http_accept_language ~* ^ko) {
        return 301 https://lang.hsslive.cn/ko;
      }
      # 日语
      if ($http_accept_language ~* ^ja) {
        return 301 https://lang.hsslive.cn/ja;
      }

      return 301 https://project.hsslive.cn/lang/defalut;

    }

    # 模拟负载均衡
    # https://project.hsslive.cn/balance/
    location = /balance/ {
      proxy_pass http://testServer/;
    }

    # 正式环境接口
    location ^~ /api/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3300/;
    }

    # 测试环境接口
    location ^~ /betaapi/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3300/;
    }

    # 正式环境接口
    location ^~ /prodapi/ {
      # X-Real-IP是自定义的，给koa里记录日志
      proxy_set_header X-Real-IP $remote_addr;
      # X-Forwarded-For,是事实上的标准，暂时没地方用到
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # X-Forwarded-Proto,是事实上的标准，给koa里的cookie使用
      proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-NginX-Proxy true;
      proxy_pass http://localhost:3200/;
    }

    # 设置/xxx/beta/xxxx.html的缓存
    location ~* ^\/([^\/]+)\/(beta|preview|prod)\/.+\.html {
      root /node/;
      try_files $uri /$1/$2/index.html;
      add_header Cache-Control "max-age=0";
    }

    # WARN 注意顺序，^\/([^\/]+)\/(beta|preview|prod)\/ 应该放到 ^\/([^\/]+)\/ 的前面，因为/multi-env-project/beta/包含了/multi-env-project/
    # 匹配/xxx/beta/等,注意，前后都有/才能匹配到
    location ~* ^\/([^\/]+)\/(beta|preview|prod)\/ {
      # 请求localhost/multi-env-project/beta/,会请求到服务器的/node/multi-env-project/beta/index.html
      root /node/;
      try_files $uri /$1/$2/index.html;
    }

    # 设置类似/xxx/xxxx.html的缓存
    location ~* ^\/([^\/]+)\/.+\.html {
      root /node/;
      try_files $uri /$1/index.html;
      add_header Cache-Control "max-age=0";
    }

    # WARN 注意顺序，^\/([^\/]+)\/(beta|preview|prod)\/ 应该放到 ^\/([^\/]+)\/ 的前面，因为/multi-env-project/beta/包含了/multi-env-project/
    # 匹配/xxx/,注意，前后都有/才能匹配到,匹配不了/xxx/
    location ~* ^\/([^\/]+)\/ {
      # 请求localhost/billd-ui/,会请求到服务器的/node/billd-ui/index.html
      root /node/;
      try_files $uri /$1/index.html;
    }

  }

}
